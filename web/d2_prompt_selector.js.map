{"version":3,"file":"d2_prompt_selector.js","sources":["../src/js/utils.ts","../src/js/Constants.ts","../src/js/D2PS_ShowButton.ts","../src/js/D2PS_ElementBuilder.ts","../src/js/D2PS_TabNavi.ts","../src/js/D2PS_ToolTip.ts","../src/js/D2PS_Search.ts","../src/js/D2PS_Category.ts","../src/js/D2PS_PromptSelectorUnit.ts","../src/js/D2PS_PromptSelector.ts","../src/js/index.ts"],"sourcesContent":["\r\n\r\n/**\r\n * CSSを動的に読み込む\r\n */\r\nconst loadCssFile = (filePath:string) => {\r\n    const link = document.createElement(\"link\");\r\n    link.rel = \"stylesheet\";\r\n    link.href = filePath;\r\n    document.head.appendChild(link);\r\n};\r\n\r\n\r\nexport {\r\n    loadCssFile,\r\n};\r\n","/**\n * cssのクラス名管理\n */\n\nclass Constants{\n    static CSS_CLASS_BUTTON = 'p-button';\n    // PromptSelect表示ボタン\n    static CSS_CLASS_SHOW_BUTTON = 'd2ps-show-button';\n    ///////////////////////////\n    // 全体\n    static CSS_CLASS_TOP_CONTAINER = \"d2ps\";\n    // コントローラーコンテナ\n    static CSS_CLASS_CONTROL_CONTAINER = \"d2ps__controller\";\n    // タグコンテナ\n    static CSS_CLASS_TAG_WRAPPER = \"d2ps__tag-wrapper\";\n    static CSS_CLASS_TAG_CONTAINER = \"d2ps__tag-container\";\n    // タグボタンコンテナ\n    static CSS_CLASS_TAG_FIELD = 'd2ps-tag-field';\n    static CSS_CLASS_TAG_FIELD_TOP = 'd2ps-tag-field--top';\n    static CSS_CLASS_TAG_FIELD_RANDOM = 'd2ps-tag-field--with-random';\n    ///////////////////////////\n    static CSS_CLASS_BUTTON_BASE = 'd2ps-button';\n    static CSS_CLASS_TAG_BUTTON = 'd2ps-button--tag';\n    static CSS_CLASS_RANDOM_BUTTON = 'd2ps-button--random';\n    ///////////////////////////\n    // 検索\n    static CSS_CLASS_SEARCH = 'd2ps-search';\n    static CSS_CLASS_SEARCH_INPUT = 'd2ps-search__input';\n    static ICON_SEARCH = '🔍';\n    ///////////////////////////\n    // タブ\n    static CSS_CLASS_TAB = 'd2ps-tab';\n    static CSS_CLASS_TAB_BUTTON = 'd2ps-tab__button';\n    ///////////////////////////\n    // ツールチップ\n    static CSS_CLASS_TOOLTIP_CONTAINER = \"d2ps-tooltip-container\";\n\n\n    static API_GET_TAGS = '/D2_prompt-selector/get_tags';\n}\n\nexport {Constants}\n","import { Constants } from \"./Constants\";\n\n\n/**\n * ウィンドウ表示ボタンを作るクラス\n */\nclass D2PS_ShowButton {\n\n    static D2_PS_SETTING_LOCATION_ID = \"D2.PromptSelector.ShowButtonLocation\";\n    static D2_PS_SETTING_LOCATION_DEFAULT = \"left-bottom\";\n    static D2_PS_SETTING_X_MARGIN_ID = \"D2.PromptSelector.ShowButtonHorizontalMargin\";\n    static D2_PS_SETTING_X_MARGIN_DEFAULT = 50;\n    static D2_PS_SETTING_Y_MARGIN_ID = \"D2.PromptSelector.ShowButtonVerticalMargin\";\n    static D2_PS_SETTING_Y_MARGIN_DEFAULT = 10;\n\n    button: HTMLButtonElement;\n    app: any;\n\n    constructor(app:any, clickFunc:()=>void) {\n\n        // this._visible = true;\n        this.app = app;\n        this.button = this._createButton(clickFunc);\n        this.changeLocation();\n\n        // // 表示切り替え\n        // const visible = app.ui.settings.getSettingValue(\"D2.PromptSelector.Visible\", true);\n        // this.changeVisible(visible);\n    }\n\n    /**\n     * ボタン位置\n     */\n    changeLocation(params = { type: \"\", value: \"\" }) {\n        const location =\n            params.type === \"location\"\n                ? params.value\n                : this.app.ui.settings.getSettingValue(D2PS_ShowButton.D2_PS_SETTING_LOCATION_ID, D2PS_ShowButton.D2_PS_SETTING_LOCATION_DEFAULT);\n        const x =\n            params.type === \"x\"\n                ? params.value\n                : this.app.ui.settings.getSettingValue(D2PS_ShowButton.D2_PS_SETTING_X_MARGIN_ID, D2PS_ShowButton.D2_PS_SETTING_X_MARGIN_DEFAULT);\n        const y =\n            params.type === \"y\"\n                ? params.value\n                : this.app.ui.settings.getSettingValue(D2PS_ShowButton.D2_PS_SETTING_Y_MARGIN_ID, D2PS_ShowButton.D2_PS_SETTING_Y_MARGIN_DEFAULT);\n\n        this.button.setAttribute(\"data-location\", location);\n\n        this.button.style.left = \"auto\";\n        this.button.style.right = \"auto\";\n        this.button.style.top = \"auto\";\n        this.button.style.bottom = \"auto\";\n\n        if (location === \"left-bottom\") {\n            this.button.style.left = `${x}px`;\n            this.button.style.bottom = `${y}px`;\n        } else if (location === \"left-top\") {\n            this.button.style.left = `${x}px`;\n            this.button.style.top = `${y}px`;\n        } else if (location === \"right-top\") {\n            this.button.style.right = `${x}px`;\n            this.button.style.top = `${y}px`;\n        } else if (location === \"right-bottom\") {\n            this.button.style.right = `${x}px`;\n            this.button.style.bottom = `${y}px`;\n        }\n    }\n\n    /**\n     * ボタン作成\n     */\n    _createButton(clickFunc:()=>void): HTMLButtonElement {\n        const button = document.createElement(\"button\");\n        button.classList.add(Constants.CSS_CLASS_BUTTON, Constants.CSS_CLASS_SHOW_BUTTON);\n        button.textContent = \"PS\";\n        button.addEventListener(\"click\", function () {\n            clickFunc();\n        });\n        document.querySelector(\"body\")?.appendChild(button);\n\n        return button;\n    }\n}\n\nexport {D2PS_ShowButton}\n","// onClick: (elm: HTMLButtonElement, ev: MouseEvent) => void;\r\n\r\nimport { TElementParams } from \"./types\";\r\nimport { Constants } from \"./Constants\";\r\n\r\n/*********************************************************\r\n * UI作成クラス\r\n */\r\nclass D2PS_ElementBuilder {\r\n\r\n    /**\r\n     * ボタン作成\r\n     * @param {*} text ボタンに表示するテキスト\r\n     * @param {*} param1 サイズ、色の指定\r\n     */\r\n    static baseButton(text: string, { size = '', color = '' }: TElementParams): HTMLButtonElement {\r\n        const button = document.createElement('button');\r\n        button.classList.add(\"p-button\");\r\n        if (size) button.classList.add(size);\r\n        if (color) button.classList.add(color);\r\n\r\n        button.textContent = text;\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * シンプルボタン\r\n     */\r\n    static simpleButton(text: string, { onClick = () => {} }: TElementParams): HTMLButtonElement {\r\n        const button = D2PS_ElementBuilder.baseButton(text, {\r\n            size: '',\r\n            color: '',\r\n        });\r\n        button.classList.add(Constants.CSS_CLASS_BUTTON_BASE, 'd2ps-button--open');\r\n        button.addEventListener('click', onClick);\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * 全体を覆うコンテナ\r\n     */\r\n    static psContainer(id: string = ''): HTMLElement {\r\n        const container = document.createElement('div');\r\n        container.id = id;\r\n        container.classList.add(Constants.CSS_CLASS_TAG_CONTAINER);\r\n        return container;\r\n    }\r\n\r\n    /**\r\n     * ネガティブ送信チェックボックス\r\n     */\r\n    static negativeCheckbox(text: string, { onChange }: TElementParams): HTMLElement {\r\n        const checkbox = document.createElement('input');\r\n        checkbox.setAttribute('type', 'checkbox');\r\n        checkbox.classList.add('d2ps-checkbox');\r\n        checkbox.addEventListener('change', () => {\r\n            onChange!(checkbox.checked);\r\n        });\r\n\r\n        const labelText = document.createElement('span');\r\n        labelText.classList.add('d2ps-label__text');\r\n        labelText.textContent = text;\r\n\r\n        const label = document.createElement('label');\r\n        label.classList.add('d2ps-label');\r\n        label.appendChild(checkbox);\r\n        label.appendChild(labelText);\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * タブコンテナ\r\n     */\r\n    static tabContainer(): HTMLElement {\r\n        const container = document.createElement('div');\r\n        container.classList.add(Constants.CSS_CLASS_TAB);\r\n        return container;\r\n    }\r\n\r\n    /**\r\n     * タブボタン\r\n     */\r\n    static tabButton(text: string, { onClick = () => {} }: TElementParams): HTMLButtonElement {\r\n        const button = D2PS_ElementBuilder.baseButton(text, {});\r\n        button.addEventListener('click', onClick);\r\n        button.classList.add(Constants.CSS_CLASS_TAB_BUTTON);\r\n        return button;\r\n    }\r\n\r\n    // /**\r\n    //  * タグのカテゴリ（ファイル単位）を覆うコンテナ\r\n    //  */\r\n    // static categoryContainer(id: string = ''): HTMLElement {\r\n    //     const container = document.createElement('div');\r\n    //     container.id = id;\r\n    //     container.classList.add('d2ps-category-container', 'tabitem', 'gradio-tabitem');\r\n    //     return container;\r\n    // }\r\n\r\n    // /**\r\n    //  * グループボタン（ランダムボタン）とタグフィールドを格納する枠\r\n    //  */\r\n    // static groupContainer(): HTMLElement {\r\n    //     const container = document.createElement('div');\r\n    //     container.classList.add('d2ps-group-container');\r\n    //     return container;\r\n    // }\r\n\r\n    /**\r\n     * タグボタン、グループを格納する枠\r\n     */\r\n    static tagField(): HTMLElement {\r\n        const field = document.createElement('div');\r\n        field.classList.add(Constants.CSS_CLASS_TAG_FIELD);\r\n        return field;\r\n    }\r\n\r\n    /**\r\n     * タグボタン\r\n     */\r\n    static tagButton(\r\n        title: string,\r\n        {\r\n            onClick = () => {},\r\n            onRightClick = () => {},\r\n            onMouseEnter = () => {},\r\n            onMouseLeave = () => {},\r\n            color = '',\r\n        }: TElementParams,\r\n    ): HTMLButtonElement {\r\n        const button = D2PS_ElementBuilder.baseButton(title, { color });\r\n        button.classList.add(Constants.CSS_CLASS_BUTTON_BASE, Constants.CSS_CLASS_TAG_BUTTON);\r\n        button.addEventListener('click', onClick);\r\n        button.addEventListener('contextmenu', onRightClick);\r\n        button.addEventListener('mouseenter', onMouseEnter);\r\n        button.addEventListener('mouseleave', onMouseLeave);\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * ランダムボタン\r\n     */\r\n    static randomButton(\r\n        title: string,\r\n        { \r\n            onClick = () => {}, \r\n            onRightClick = () => {}, \r\n            onMouseEnter = () => {},\r\n            onMouseLeave = () => {},\r\n            color = 'primary'\r\n        }: TElementParams,\r\n    ): HTMLButtonElement {\r\n        const button = D2PS_ElementBuilder.baseButton(title, { color });\r\n        button.classList.add(Constants.CSS_CLASS_BUTTON_BASE, Constants.CSS_CLASS_RANDOM_BUTTON);\r\n        button.addEventListener('click', onClick);\r\n        button.addEventListener('contextmenu', onRightClick);\r\n        button.addEventListener('mouseenter', onMouseEnter);\r\n        button.addEventListener('mouseleave', onMouseLeave);\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * ツールチップ\r\n     */\r\n    static toolTipContainer() {\r\n        const container = document.createElement('div');\r\n        container.classList.add(Constants.CSS_CLASS_TOOLTIP_CONTAINER);\r\n        return container;\r\n    }\r\n\r\n    /**\r\n     * 検索入力エリア\r\n     */\r\n    // static searchContainer(input: HTMLInputElement, { onClick = () => {} }: TElementParams) {\r\n    static searchContainer(input: HTMLInputElement) {\r\n        const container = document.createElement('div');\r\n        container.classList.add(Constants.CSS_CLASS_SEARCH);\r\n        container.appendChild(input);\r\n\r\n        // const button = D2PS_ElementBuilder.baseButton(`${Constants.ICON_SEARCH}検索`, {\r\n        //     size: '',\r\n        //     color: '',\r\n        // });\r\n        // button.classList.add(Constants.CSS_CLASS_BUTTON_BASE);\r\n        // button.addEventListener('click', onClick);\r\n        // container.appendChild(button);\r\n\r\n        return container;\r\n    }\r\n\r\n    static searchInput(): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.classList.add(Constants.CSS_CLASS_SEARCH_INPUT);\r\n        return input;\r\n    }\r\n}\r\n\r\nexport { D2PS_ElementBuilder };\r\n","import { Constants } from './Constants';\r\nimport { D2PS_ElementBuilder } from './D2PS_ElementBuilder';\r\nimport { TConfig, TTags, TTagsDict } from './types';\r\n\r\nclass D2PS_TabButton {\r\n    button: HTMLButtonElement;\r\n    id: string;\r\n\r\n    constructor(id: string, onClick: (id: string) => void) {\r\n        this.id = id;\r\n        this.button = D2PS_ElementBuilder.tabButton(id, {\r\n            onClick: () => {\r\n                onClick(this.id);\r\n            },\r\n        });\r\n    }\r\n\r\n    setActive(bool: boolean) {\r\n        this.button.setAttribute('data-active', bool ? 'true' : 'false');\r\n    }\r\n}\r\n\r\n///////////////////\r\nclass D2PS_TabNavi {\r\n    tabButtons: D2PS_TabButton[];\r\n    activeCategory: string;\r\n    onChange: () => void;\r\n\r\n    constructor(onChange: () => void) {\r\n        this.onChange = onChange;\r\n        this.tabButtons = [];\r\n        this.activeCategory = '';\r\n    }\r\n\r\n    /**\r\n     * タブ切り替えボタンを作る\r\n     */\r\n    createTabNavi(config: TConfig, tags: TTags): HTMLElement {\r\n        const idList = Object.keys(tags);\r\n        const sortItems: string[] = Array.from(new Set([...config.sort, ...idList]));\r\n        const container = D2PS_ElementBuilder.tabContainer();\r\n        // 検索用タブを追加\r\n        sortItems.push(Constants.ICON_SEARCH);\r\n\r\n        sortItems.forEach((id: string) => {\r\n            // ソート指定にあるが、実際にタグカテゴリが存在しないものは無視\r\n            if (id !== Constants.ICON_SEARCH && !(tags as TTagsDict).hasOwnProperty(id)) return;\r\n\r\n            const tabButton = new D2PS_TabButton(id, () => {\r\n                this.$_clickTabButton(id);\r\n            });\r\n            this.tabButtons.push(tabButton);\r\n            container.appendChild(tabButton.button);\r\n        });\r\n        this.$_clickTabButton(sortItems[0]);\r\n        return container;\r\n    }\r\n\r\n    /**\r\n     * タブボタンがクリックされた\r\n     */\r\n    private $_clickTabButton(id: string) {\r\n        this.activeCategory = id;\r\n\r\n        this.tabButtons.forEach((tabButton) => {\r\n            tabButton.setActive(tabButton.id === id);\r\n        });\r\n\r\n        this.onChange();\r\n    }\r\n}\r\n\r\nexport { D2PS_TabNavi };\r\n","/**\r\nプロンプトの内容を画面下部に表示\r\n */\r\n\r\nimport { D2PS_ElementBuilder } from './D2PS_ElementBuilder';\r\nimport { TOpts } from \"./types\";\r\n\r\ndeclare var opts: TOpts;\r\n\r\nclass D2PS_ToolTip {\r\n    static container: HTMLElement | undefined;\r\n    static toHide = false;\r\n\r\n    /**\r\n     * 初期化\r\n     */\r\n    static init():HTMLElement {\r\n        const self = D2PS_ToolTip;\r\n\r\n        if (self.container !== undefined) return self.container;\r\n\r\n        self.container = D2PS_ElementBuilder.toolTipContainer();\r\n        // self.container.addEventListener('animationend', () => {\r\n        //     self.container?.setAttribute('data-show', '');\r\n        // });\r\n        // document.body.appendChild(self.container);\r\n\r\n        return self.container;\r\n    }\r\n\r\n    /**\r\n     * ツールチップの表示は有効か\r\n     */\r\n    static get isEnabled(): boolean {\r\n        // return opts.d2_ps_enable_tooltip;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * タグを表示\r\n     */\r\n    static showTip(tag: string) {\r\n        const self = D2PS_ToolTip;\r\n        if (!self.isEnabled || !self.container) return;\r\n\r\n        self.toHide = false;\r\n        self.container.textContent = tag;\r\n        // self.container.setAttribute('data-show', 'true');\r\n    }\r\n\r\n    /**\r\n     * 非表示\r\n     */\r\n    static hideTip() {\r\n        const self = D2PS_ToolTip;\r\n        if (!self.isEnabled || !self.container) return;\r\n\r\n        self.toHide = true;\r\n\r\n        // setTimeout(() => {\r\n        //     if (!self.toHide) return;\r\n\r\n        //     self.container.setAttribute('data-show', 'false');\r\n        // }, 500);\r\n        self.container.textContent = \"\";\r\n    }\r\n}\r\n\r\nexport { D2PS_ToolTip };\r\n","/** 検索機能 */\r\n\r\nimport { D2PS_ElementBuilder } from './D2PS_ElementBuilder';\r\nimport { TTags, TTagsDict, TOpts } from \"./types\";\r\n\r\ndeclare var opts: TOpts;\r\n\r\ntype TConvedTags = {\r\n    ___: string[];\r\n    [key: string]: string | string[];\r\n};\r\n\r\n/**\r\n * タグの階層を１階層のみにする\r\n */\r\nconst tagConvert = (orgTags: TTags): TConvedTags => {\r\n    const conved: TConvedTags = { ___: [] };\r\n\r\n    function traverse(tags: TTags) {\r\n        if (Array.isArray(tags)) {\r\n            conved.___.push(...tags);\r\n            return;\r\n        }\r\n        Object.keys(tags).forEach((key) => {\r\n            const value = tags[key];\r\n\r\n            if (typeof value === 'string') {\r\n                conved[key] = value;\r\n                return;\r\n            }\r\n\r\n            traverse(value);\r\n        });\r\n    }\r\n\r\n    traverse(orgTags);\r\n    return conved;\r\n};\r\n\r\n/**\r\n * 変換済みのタグ一覧から検索して連想配列にして返す\r\n */\r\nconst tagSearch = (convedTags: TConvedTags, keyword: string): TTagsDict => {\r\n    const filtered: TTagsDict = {};\r\n\r\n    // 配列から探す\r\n    convedTags.___.filter((value) => {\r\n        return value.includes(keyword);\r\n    }).forEach((value) => {\r\n        filtered[value] = value;\r\n    });\r\n\r\n    // 連想配列から探す\r\n    Object.keys(convedTags).forEach((key) => {\r\n        if (key === '___') return;\r\n\r\n        const value = convedTags[key];\r\n        if (key.includes(keyword) || value.includes(keyword)) {\r\n            filtered[key] = value;\r\n        }\r\n    });\r\n\r\n    return filtered;\r\n};\r\n\r\n/////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////\r\n/////////////////////////////////////////////////////\r\nclass D2PS_Search {\r\n    static convedTags: TConvedTags = { ___: [] };\r\n\r\n    container: HTMLElement | undefined;\r\n    input: HTMLInputElement | undefined;\r\n\r\n    /**\r\n     * タグ一覧を受け取って検索用に変換\r\n     */\r\n    static setTags(tags: TTags) {\r\n        D2PS_Search.convedTags = tagConvert(tags);\r\n    }\r\n\r\n    /**\r\n     * タグ入力コンテナ作成\r\n     */\r\n    createSearchContainer(onSearch: (filterdTags: TTags) => void): HTMLElement {\r\n        // リアルタイム検索するか\r\n        // const isRealTime = opts.d2_ps_enable_realtime_search;\r\n        const isRealTime = true;\r\n\r\n        // 入力フォーム\r\n        this.input = D2PS_ElementBuilder.searchInput();\r\n\r\n        this.input.addEventListener('keydown', (ev: KeyboardEvent) => {\r\n            if (isRealTime || ev.key === 'Enter' || ev.key === 'NumpadEnter') {\r\n                const value = this.input ? this.input.value : '';\r\n                onSearch(tagSearch(D2PS_Search.convedTags, value));\r\n            }\r\n        });\r\n\r\n        // 検索ボタンと枠\r\n        // this.container = D2PS_ElementBuilder.searchContainer(this.input, {\r\n        //     onClick: () => {\r\n        //         const value = this.input ? this.input.value : '';\r\n        //         onSearch(tagSearch(D2PS_Search.convedTags, value));\r\n        //     },\r\n        // });\r\n        this.container = D2PS_ElementBuilder.searchContainer(this.input);\r\n\r\n        return this.container;\r\n    }\r\n}\r\n\r\nexport { D2PS_Search };\r\n","import { D2PS_ElementBuilder } from './D2PS_ElementBuilder';\r\nimport { D2PS_ToolTip } from './D2PS_ToolTip';\r\nimport { D2PS_Search } from './D2PS_Search';\r\nimport { TTags, TTagButtonClick, TElementParams } from \"./types\";\r\nimport { Constants } from './Constants';\r\n\r\n///////////////////\r\nclass D2PS_Category {\r\n    onClick: TTagButtonClick;\r\n    // onRightClick: TTagButtonClick;\r\n    categoryId: string = '';\r\n    container: HTMLElement;\r\n\r\n    // constructor(categoryId: string, onClick: TTagButtonClick, onRightClick: TTagButtonClick) {\r\n    constructor(categoryId: string, onClick: TTagButtonClick) {\r\n        this.categoryId = categoryId;\r\n        this.onClick = onClick;\r\n        // this.onRightClick = onRightClick;\r\n        this.container = D2PS_ElementBuilder.tagField();\r\n        this.container.classList.add(Constants.CSS_CLASS_TAG_FIELD_TOP);\r\n        this.container.style.display = 'none';\r\n    }\r\n\r\n    /**\r\n     * 検索を作る\r\n     */\r\n    createSearch(): HTMLElement {\r\n        this.container.classList.add(Constants.CSS_CLASS_TAG_FIELD_RANDOM);\r\n\r\n        // 検索入力\r\n        const search = new D2PS_Search();\r\n        const searchContainer = search.createSearchContainer((filtered: TTags) => {\r\n            // 過去の検索結果を削除\r\n            const children = this.container.children;\r\n            if (children.length >= 2) {\r\n                children[1].remove();\r\n            }\r\n            const buttonField = D2PS_ElementBuilder.tagField();\r\n            this.container.appendChild(buttonField);\r\n\r\n            // 検索結果のボタンを作る\r\n            this.$_createButtons(filtered, '').forEach((button) => {\r\n                buttonField.appendChild(button);\r\n            });\r\n        });\r\n        this.container.appendChild(searchContainer);\r\n\r\n        return this.container;\r\n    }\r\n\r\n    /**\r\n     * カテゴリーを作る\r\n     */\r\n    createCategory(tags: TTags): HTMLElement {\r\n        this.$_createButtons(tags, this.categoryId).forEach((button) => {\r\n            this.container.appendChild(button);\r\n        });\r\n        return this.container;\r\n    }\r\n\r\n    /**\r\n     * ボタンかフィールドを配列で受け取る\r\n     * @param tags\r\n     * @param prefix 階層テキスト\r\n     * @returns\r\n     */\r\n    private $_createButtons(tags: TTags, prefix = ''): HTMLElement[] {\r\n        // 配列ならボタンテキスト無しのタグが並んでいるだけ\r\n        if (Array.isArray(tags)) {\r\n            return tags.map((tag) => {\r\n                return this.$_createTagButton('tag', tag, `${tag},`, 'secondary');\r\n            });\r\n        }\r\n\r\n        // 以下は連想配列の処理\r\n        return Object.keys(tags).map((key) => {\r\n            const values = tags[key];\r\n            const randomKey = `${prefix}:${key}`;\r\n\r\n            // 内容が文字列ならタグ\r\n            if (typeof values === 'string') {\r\n                return this.$_createTagButton('tag', key, `${values},`, '');\r\n            }\r\n\r\n            // 以下は内容が配列 or 連想配列だった時\r\n            // ランダムボタンを作成してフィールドに格納\r\n            const field = D2PS_ElementBuilder.tagField();\r\n            field.classList.add(Constants.CSS_CLASS_TAG_FIELD_RANDOM);\r\n\r\n            const randomPrompt = this.$_getWildCardPrompt(values);\r\n            if(randomPrompt){\r\n                field.appendChild(this.$_createTagButton('random', key, randomPrompt, ''));\r\n            }else{\r\n                field.appendChild(this.$_createTagButton('random', key, randomPrompt, 'd2ps-button--none'));\r\n            }\r\n\r\n            // ボタンだけのフィールドを作成\r\n            const buttonField = D2PS_ElementBuilder.tagField();\r\n            field.appendChild(buttonField);\r\n\r\n            // 下層またはボタンを作成\r\n            this.$_createButtons(values, randomKey).forEach((button: HTMLElement) => {\r\n                buttonField.appendChild(button);\r\n            });\r\n\r\n            return field;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 配列、連想配列から文字列を連結してワイルドカードプロンプトを生成\r\n     */\r\n    private $_getWildCardPrompt (value: string[] | Record<string, unknown>): string {\r\n        // 配列の場合\r\n        if (Array.isArray(value)) {\r\n            return `{ ${value.map((str)=>`${str},`).join(' | ')} }`;\r\n        }\r\n\r\n        // 連想配列の場合\r\n        const values = Object.values(value);\r\n        \r\n        // 下層にオブジェクトが含まれている場合は何も返さない\r\n        if (values.some(v => typeof v === 'object' && v !== null)) {\r\n            return '';\r\n        }\r\n\r\n        // 文字列のみを抽出\r\n        const validValues = values\r\n            .filter(v => typeof v === 'string')\r\n            .map(v => `${v},` as string);\r\n\r\n        return validValues.length > 0 ? `{ ${validValues.join(' | ')} }` : '';\r\n    }\r\n\r\n    /**\r\n     * タグボタンを作成\r\n     * @param title ボタンに表示するテキスト\r\n     * @param value プロンプトタグ\r\n     * @param color ボタン色\r\n     * @returns ボタン\r\n     */\r\n    private $_createTagButton(\r\n        type: 'tag' | 'random',\r\n        title: string,\r\n        value: string,\r\n        color = 'primary',\r\n        tooltip?: string,\r\n    ): HTMLButtonElement {\r\n        const param: TElementParams = {\r\n            onClick: (e: MouseEvent) => {\r\n                e.preventDefault();\r\n                this.onClick(value, e.metaKey || e.ctrlKey);\r\n            },\r\n            // onRightClick: (e: MouseEvent) => {\r\n            //     e.preventDefault();\r\n            //     this.onRightClick(value, e.metaKey || e.ctrlKey);\r\n            // },\r\n            onMouseEnter: () => {\r\n                D2PS_ToolTip.showTip(tooltip || value);\r\n            },\r\n            onMouseLeave: () => {\r\n                D2PS_ToolTip.hideTip();\r\n            },\r\n            color,\r\n        };\r\n\r\n        if (type === 'random') {\r\n            return D2PS_ElementBuilder.randomButton(title, param);\r\n        } else {\r\n            return D2PS_ElementBuilder.tagButton(title, param);\r\n        }\r\n    }\r\n}\r\n\r\nexport { D2PS_Category };\r\n","/* global gradioApp */\r\n\r\nimport { D2PS_ElementBuilder } from './D2PS_ElementBuilder';\r\nimport { D2PS_TabNavi } from './D2PS_TabNavi';\r\nimport { D2PS_Category } from './D2PS_Category';\r\nimport { D2PS_ToolTip } from './D2PS_ToolTip';\r\nimport { TConfig, TTags, TTagsDict, TTagButtonClick } from './types';\r\nimport { Constants } from './Constants';\r\n\r\ndeclare var gradioApp: any;\r\ndeclare var updateInput: any;\r\n\r\n/*********************************************************\r\n * プロンプトセレクター本体\r\n * txt2img / img2img それぞれで作成する\r\n */\r\nclass D2PS_PromptSelectorUnit {\r\n\r\n    // type: string;\r\n    container: HTMLElement;\r\n    tagWrapper: HTMLElement;\r\n    visible: boolean;\r\n    toNegative: boolean;\r\n    tags: TTags;\r\n    config: TConfig | undefined;\r\n    categories: D2PS_Category[];\r\n    tabNavi: D2PS_TabNavi | undefined;\r\n    onClick: TTagButtonClick;\r\n    // onRightClick: TTagButtonClick;\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    // constructor(onClick: TTagButtonClick, onRightClick: TTagButtonClick) {\r\n    constructor(onClick: TTagButtonClick) {\r\n        // ここで初期化しないとエラーになるのでとりあえず作っておく\r\n        this.container = document.createElement(\"div\");\r\n        this.tagWrapper = document.createElement(\"div\");\r\n        this.visible = false;\r\n        this.toNegative = false;\r\n        this.tags = {};\r\n        this.categories = [];\r\n        this.onClick = onClick;\r\n        // this.onRightClick = onRightClick;\r\n    }\r\n\r\n    /**\r\n     * 閉じるボタンなど基本コントローラー作成\r\n     */\r\n    createControl(reloadClick: () => void) {\r\n        // 全体\r\n        this.container = document.createElement(\"div\");\r\n        this.container.classList.add(Constants.CSS_CLASS_TOP_CONTAINER);\r\n        document.body.appendChild(this.container);\r\n\r\n        // コントローラー枠\r\n        const controllerArea = document.createElement('div');\r\n        controllerArea.classList.add(Constants.CSS_CLASS_CONTROL_CONTAINER);\r\n        this.container.appendChild(controllerArea);\r\n\r\n\r\n        // タグ再読み込みボタン\r\n        const reloadButton = D2PS_ElementBuilder.simpleButton(\"🔄\", {\r\n            onClick: async ()=> {\r\n                await reloadClick();\r\n            }\r\n        });\r\n        controllerArea.appendChild(reloadButton);\r\n\r\n        // 閉じるボタン\r\n        const closeButton = D2PS_ElementBuilder.simpleButton(\"✖\", {\r\n            onClick: () => {\r\n                this.changeVisible();\r\n            },\r\n        });\r\n        controllerArea.appendChild(closeButton);\r\n\r\n        // タグコンテンツの入れ物\r\n        this.tagWrapper = document.createElement(\"div\");\r\n        this.tagWrapper.classList.add(Constants.CSS_CLASS_TAG_WRAPPER);\r\n        this.container.appendChild(this.tagWrapper);\r\n\r\n        // プレビュー表示\r\n        this.container.appendChild(D2PS_ToolTip.init());\r\n\r\n        this.changeVisible(false);\r\n    }\r\n\r\n    /**\r\n     * 初期化\r\n     */\r\n    init(tags: TTags, config: TConfig) {\r\n        this.tags = tags;\r\n        this.config = config;\r\n\r\n        let tagContainer = document.querySelector(`.${Constants.CSS_CLASS_TAG_CONTAINER}`);\r\n\r\n        // タグボタンを消して作り直す\r\n        if (tagContainer) {\r\n            tagContainer.remove();\r\n            this.categories = [];\r\n        }\r\n        tagContainer = this.$_render();\r\n        this.tagWrapper.appendChild(tagContainer);\r\n    }\r\n\r\n    /**\r\n     * 表示状態切り替え\r\n     */\r\n    changeVisible(bool:boolean|undefined = undefined) {\r\n        this.visible = bool !== undefined ? bool : !this.visible;\r\n        this.container.style.display = this.visible ? 'grid' : 'none';\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * タグエリア全体を作る\r\n     */\r\n    private $_render(): HTMLElement {\r\n        // 全体を覆うコンテナ\r\n        const tagContainer = D2PS_ElementBuilder.psContainer(\"\");\r\n        // タグカテゴリ作成\r\n        this.$_renderCategory(tagContainer);\r\n        // タブ切り替えボタン\r\n        tagContainer.appendChild(this.$_renderTabNavi());\r\n\r\n        this.$_changeCategory();\r\n\r\n        return tagContainer;\r\n    }\r\n\r\n    /**\r\n     * タブ切り替えを作る\r\n     */\r\n    private $_renderTabNavi(): HTMLElement {\r\n        this.tabNavi = new D2PS_TabNavi(() => {\r\n            this.$_changeCategory();\r\n        });\r\n        return this.tabNavi.createTabNavi(this.config as TConfig, this.tags);\r\n    }\r\n\r\n    /**\r\n     * アクティブカテゴリーを切り替える\r\n     */\r\n    private $_changeCategory() {\r\n        this.categories.forEach((category: D2PS_Category) => {\r\n            if (this.tabNavi!.activeCategory === category.categoryId) {\r\n                category.container.style.display = 'flex';\r\n            } else {\r\n                category.container.style.display = 'none';\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * タグカテゴリを作る\r\n     */\r\n    private $_renderCategory(parentContainer: HTMLElement) {\r\n        Object.keys(this.tags).forEach((categoryId: string) => {\r\n            const category = new D2PS_Category(\r\n                categoryId, this.onClick\r\n            );\r\n            const categoryContainer = category.createCategory((this.tags as TTagsDict)[categoryId]);\r\n            parentContainer.appendChild(categoryContainer);\r\n            this.categories.push(category);\r\n        });\r\n\r\n        // 検索を作る\r\n        const searchCategory = new D2PS_Category(\r\n            '🔍', this.onClick\r\n        );\r\n        const categoryContainer = searchCategory.createSearch();\r\n        parentContainer.appendChild(categoryContainer);\r\n        this.categories.push(searchCategory);\r\n    }\r\n\r\n}\r\n\r\nexport { D2PS_PromptSelectorUnit };\r\n","/* global gradioApp */\r\n\r\nimport { Constants } from \"./Constants\";\r\nimport { D2PS_PromptSelectorUnit } from \"./D2PS_PromptSelectorUnit\";\r\nimport { D2PS_Search } from './D2PS_Search';\r\nimport { TConfig, TTags } from './types';\r\n\r\nclass D2PS_PromptSelector {\r\n    tags: TTags;\r\n    config: TConfig | undefined;\r\n    psUnit: D2PS_PromptSelectorUnit;\r\n    targetTextArea: HTMLTextAreaElement | undefined;\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    constructor() {\r\n        this.psUnit = new D2PS_PromptSelectorUnit(this.onTagClick.bind(this));\r\n        this.tags = {};\r\n        this.targetTextArea = undefined;\r\n\r\n        // documentにイベントリスナーを設定し、textareaへのフォーカスを監視\r\n        document.addEventListener('focus', (e:any) => {\r\n            // フォーカスされた要素がtextareaの場合\r\n            if (e.target.tagName.toLowerCase() === 'textarea') {\r\n                this.targetTextArea = e.target as HTMLTextAreaElement;\r\n            }\r\n        }, true); // キャプチャリングフェーズで実行\r\n    }\r\n\r\n    /**\r\n     * 表示切り替えボタンなどを作成\r\n     * 再読み込みボタンの動作も指定\r\n     */\r\n    createControl() {\r\n        this.psUnit.createControl(() => {\r\n            this.init();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 初期化\r\n     */\r\n    async init() {\r\n        await this.getTags();\r\n        this.psUnit.init(this.tags, this.config as TConfig);\r\n    }\r\n\r\n    /**\r\n     * 表示状態切り替え\r\n     */\r\n    changeVisible() {\r\n        this.psUnit.changeVisible();\r\n    }\r\n\r\n    /**\r\n     * タグファイルをjsonで取得\r\n     * @returns object タグリスト\r\n     */\r\n    async getTags() {\r\n        const response = await fetch(`${Constants.API_GET_TAGS}?${new Date().getTime()}`);\r\n        const tags = await response.json();\r\n\r\n        // 設定を取り出す\r\n        this.config = tags.__config__;\r\n        delete tags['__config__'];\r\n        this.tags = tags;\r\n\r\n        // 検索用に設定\r\n        D2PS_Search.setTags(tags);\r\n    }\r\n\r\n    /**\r\n     * タグボタンクリック\r\n     * @param tag \r\n     * @param toNegative \r\n     */\r\n    // onTagClick(tag: string, toNegative: boolean = false) {\r\n    onTagClick(tag: string) {\r\n        if(!this.targetTextArea) return;\r\n\r\n        const tag2 = `${tag} `;\r\n\r\n        // カーソル位置を取得\r\n        const startPos = this.targetTextArea.selectionStart;\r\n        const endPos = this.targetTextArea.selectionEnd;\r\n        \r\n        // テキストを追加\r\n        const currentValue = this.targetTextArea.value;\r\n        const beforeText = currentValue.substring(0, startPos);\r\n        const afterText = currentValue.substring(endPos);\r\n        \r\n        // テキストを結合\r\n        this.targetTextArea.value = beforeText + tag2 + afterText;\r\n        \r\n        // カーソル位置を追加したテキストの後ろに移動\r\n        const newPosition = startPos + tag2.length;\r\n        this.targetTextArea.setSelectionRange(newPosition, newPosition);\r\n        \r\n        // フォーカスを維持\r\n        this.targetTextArea.focus();\r\n\r\n    }\r\n    // onTagRightClick(tag: string, toNegative: boolean = false) {\r\n    //     // this.$_addTag(tag, toNegative);\r\n    //     // console.log(\"aaa right click\", tag, toNegative);\r\n    // }\r\n\r\n\r\n}\r\n\r\nexport { D2PS_PromptSelector };\r\n","declare var app: any;\r\n\r\n// import { app } from \"../../scripts/app.js\";\r\n\r\nimport { loadCssFile } from \"./utils.js\";\r\nimport { D2PS_ShowButton } from \"./D2PS_ShowButton.js\";\r\nimport { D2PS_PromptSelector } from \"./D2PS_PromptSelector.js\";\r\n\r\n\r\nconst D2_PS_CSS_FILEPATH = \"/D2_prompt-selector/assets/style.css\";\r\nloadCssFile(D2_PS_CSS_FILEPATH);\r\n\r\n(function () {\r\n    const promptSelector = new D2PS_PromptSelector();\r\n    const showButton = new D2PS_ShowButton(app, ()=>{\r\n        promptSelector.changeVisible();\r\n    } );\r\n\r\n    promptSelector.createControl();\r\n    promptSelector.init();\r\n\r\n\r\n    ////////////////////////////////\r\n    // ボタン設定\r\n    // 表示ボタンの位置\r\n    app.ui.settings.addSetting({\r\n        id: D2PS_ShowButton.D2_PS_SETTING_LOCATION_ID,\r\n        name: \"ShowButton Location\",\r\n        type: \"combo\",\r\n        options: [\r\n            { value: \"left-top\", text: \"Left Top\" },\r\n            { value: \"left-bottom\", text: \"Left Bottom\" },\r\n            { value: \"right-top\", text: \"Right Top\" },\r\n            { value: \"right-bottom\", text: \"Right Bottom\" },\r\n        ],\r\n        defaultValue: D2PS_ShowButton.D2_PS_SETTING_LOCATION_DEFAULT,\r\n        onChange(value:string) {\r\n            showButton.changeLocation({ type: \"location\", value: value });\r\n        },\r\n    });\r\n\r\n    // 表示ボタンの座標：X\r\n    app.ui.settings.addSetting({\r\n        id: D2PS_ShowButton.D2_PS_SETTING_X_MARGIN_ID,\r\n        name: \"ShowButton Horizontal Margin(px)\",\r\n        type: \"number\",\r\n        defaultValue: D2PS_ShowButton.D2_PS_SETTING_X_MARGIN_DEFAULT,\r\n        onChange(value:string) {\r\n            showButton.changeLocation({ type: \"x\", value: value });\r\n        },\r\n    });\r\n\r\n    // 表示ボタンの座標：Y\r\n    app.ui.settings.addSetting({\r\n        id: D2PS_ShowButton.D2_PS_SETTING_Y_MARGIN_ID,\r\n        name: \"ShowButton Vertical Margin(px)\",\r\n        type: \"number\",\r\n        defaultValue: D2PS_ShowButton.D2_PS_SETTING_Y_MARGIN_DEFAULT,\r\n        onChange(value:string) {\r\n            showButton.changeLocation({ type: \"y\", value: value });\r\n        },\r\n    });\r\n\r\n    // app.ui.settings.addSetting({\r\n    //     id: \"D2.PromptSelector.Visible\",\r\n    //     name: \"Show queue button\",\r\n    //     type: \"boolean\",\r\n    //     defaultValue: true,\r\n    //     onChange(value) {\r\n    //         PromptSelector.changeVisible(value);\r\n    //     },\r\n    // });\r\n})();\r\n"],"names":["app","categoryContainer"],"mappings":"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"}